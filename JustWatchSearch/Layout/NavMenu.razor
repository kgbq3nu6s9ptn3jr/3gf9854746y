@inject IJSRuntime JS
@inject CorsProxyState CorsState

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">JustWatch Search</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="search"  Match="NavLinkMatch.Prefix">
                <span class="bi bi-search-nav-menu" aria-hidden="true"></span> Search
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <select id="countrySelect" class="form-select" value="@selectedCountry" @onchange="OnCountryChanged">
                <option value="US">US</option>
                <option value="AE">AE</option>
                <option value="AR">AR</option>
                <option value="AT">AT</option>
                <option value="AU">AU</option>
                <option value="BE">BE</option>
                <option value="BG">BG</option>
                <option value="BO">BO</option>
                <option value="BR">BR</option>
                <option value="CA">CA</option>
                <option value="CH">CH</option>
                <option value="CL">CL</option>
                <option value="CO">CO</option>
                <option value="CR">CR</option>
                <option value="CZ">CZ</option>
                <option value="DE">DE</option>
                <option value="DK">DK</option>
                <option value="EC">EC</option>
                <option value="EG">EG</option>
                <option value="ES">ES</option>
                <option value="FI">FI</option>
                <option value="FR">FR</option>
                <option value="GB">GB</option>
                <option value="GR">GR</option>
                <option value="GT">GT</option>
                <option value="HR">HR</option>
                <option value="HU">HU</option>
                <option value="ID">ID</option>
                <option value="IE">IE</option>
                <option value="IN">IN</option>
                <option value="IT">IT</option>
                <option value="JP">JP</option>
                <option value="KR">KR</option>
                <option value="MX">MX</option>
                <option value="MY">MY</option>
                <option value="NL">NL</option>
                <option value="NO">NO</option>
                <option value="NZ">NZ</option>
                <option value="PE">PE</option>
                <option value="PH">PH</option>
                <option value="PK">PK</option>
                <option value="PL">PL</option>
                <option value="PT">PT</option>
                <option value="RO">RO</option>
                <option value="RU">RU</option>
                <option value="SA">SA</option>
                <option value="SE">SE</option>
                <option value="SG">SG</option>
                <option value="SK">SK</option>
                <option value="TH">TH</option>
                <option value="TR">TR</option>
                <option value="TW">TW</option>
                <option value="VE">VE</option>
                <option value="ZA">ZA</option>
            </select>
        </div>
    </nav>
</div>

<input class="form-check-input" type="checkbox" role="switch" checked="@CorsState.UseCorsProxy" @onchange="OnCorsChanged">

@code {
    private bool collapseNavMenu = true;
    private string? selectedCountry;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task OnCountryChanged(ChangeEventArgs e)
    {
        selectedCountry = e.Value?.ToString();
        await JS.InvokeVoidAsync("sessionStorage.setItem", "country", selectedCountry);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var storedCountry = await JS.InvokeAsync<string>("sessionStorage.getItem", "country");
            if (!string.IsNullOrEmpty(storedCountry))
            {
                selectedCountry = storedCountry;
                StateHasChanged();
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await CorsState.InitializeAsync(JS);
        CorsState.OnChange += StateHasChanged;
    }

    private async Task OnCorsChanged(ChangeEventArgs e)
    {
        var isChecked = e.Value is bool b ? b : (e.Value?.ToString() == "true");
        await CorsState.SetAsync(isChecked, JS);
    }

    public void Dispose() => CorsState.OnChange -= StateHasChanged;
}
